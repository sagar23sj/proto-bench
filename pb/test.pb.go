// Code generated by protoc-gen-go.
// source: test.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	test.proto

It has these top-level messages:
	BenchSmall
	BenchMedium
	BenchLarge
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BenchSmall struct {
	Action string `protobuf:"bytes,1,opt,name=action" json:"action,omitempty"`
	Key    []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *BenchSmall) Reset()                    { *m = BenchSmall{} }
func (m *BenchSmall) String() string            { return proto.CompactTextString(m) }
func (*BenchSmall) ProtoMessage()               {}
func (*BenchSmall) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BenchSmall) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *BenchSmall) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type BenchMedium struct {
	Name   string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Age    int64   `protobuf:"varint,2,opt,name=age" json:"age,omitempty"`
	Height float32 `protobuf:"fixed32,3,opt,name=height" json:"height,omitempty"`
	Weight float64 `protobuf:"fixed64,4,opt,name=weight" json:"weight,omitempty"`
	Alive  bool    `protobuf:"varint,5,opt,name=alive" json:"alive,omitempty"`
	Desc   []byte  `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (m *BenchMedium) Reset()                    { *m = BenchMedium{} }
func (m *BenchMedium) String() string            { return proto.CompactTextString(m) }
func (*BenchMedium) ProtoMessage()               {}
func (*BenchMedium) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BenchMedium) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BenchMedium) GetAge() int64 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *BenchMedium) GetHeight() float32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *BenchMedium) GetWeight() float64 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *BenchMedium) GetAlive() bool {
	if m != nil {
		return m.Alive
	}
	return false
}

func (m *BenchMedium) GetDesc() []byte {
	if m != nil {
		return m.Desc
	}
	return nil
}

type BenchLarge struct {
	Name     string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Age      int64   `protobuf:"varint,2,opt,name=age" json:"age,omitempty"`
	Height   float32 `protobuf:"fixed32,3,opt,name=height" json:"height,omitempty"`
	Weight   float64 `protobuf:"fixed64,4,opt,name=weight" json:"weight,omitempty"`
	Alive    bool    `protobuf:"varint,5,opt,name=alive" json:"alive,omitempty"`
	Desc     []byte  `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc,omitempty"`
	Nickname string  `protobuf:"bytes,7,opt,name=nickname" json:"nickname,omitempty"`
	Num      int64   `protobuf:"varint,8,opt,name=num" json:"num,omitempty"`
	Flt      float32 `protobuf:"fixed32,9,opt,name=flt" json:"flt,omitempty"`
	Dbl      float64 `protobuf:"fixed64,10,opt,name=dbl" json:"dbl,omitempty"`
	Tru      bool    `protobuf:"varint,11,opt,name=tru" json:"tru,omitempty"`
	Data     []byte  `protobuf:"bytes,12,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *BenchLarge) Reset()                    { *m = BenchLarge{} }
func (m *BenchLarge) String() string            { return proto.CompactTextString(m) }
func (*BenchLarge) ProtoMessage()               {}
func (*BenchLarge) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *BenchLarge) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BenchLarge) GetAge() int64 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *BenchLarge) GetHeight() float32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *BenchLarge) GetWeight() float64 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *BenchLarge) GetAlive() bool {
	if m != nil {
		return m.Alive
	}
	return false
}

func (m *BenchLarge) GetDesc() []byte {
	if m != nil {
		return m.Desc
	}
	return nil
}

func (m *BenchLarge) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *BenchLarge) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *BenchLarge) GetFlt() float32 {
	if m != nil {
		return m.Flt
	}
	return 0
}

func (m *BenchLarge) GetDbl() float64 {
	if m != nil {
		return m.Dbl
	}
	return 0
}

func (m *BenchLarge) GetTru() bool {
	if m != nil {
		return m.Tru
	}
	return false
}

func (m *BenchLarge) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*BenchSmall)(nil), "pb.BenchSmall")
	proto.RegisterType((*BenchMedium)(nil), "pb.BenchMedium")
	proto.RegisterType((*BenchLarge)(nil), "pb.BenchLarge")
}

func init() { proto.RegisterFile("test.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 256 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xc4, 0x91, 0x41, 0x4e, 0xb4, 0x40,
	0x10, 0x85, 0xd3, 0x30, 0xc3, 0xcf, 0xd4, 0xcc, 0xe2, 0x4f, 0xc7, 0x98, 0x8a, 0x2b, 0xc2, 0x8a,
	0x95, 0x1b, 0x13, 0x0f, 0xe0, 0x5a, 0x37, 0xed, 0x09, 0x0a, 0x28, 0x81, 0x0c, 0x34, 0x13, 0xa6,
	0xd1, 0xb8, 0x77, 0xeb, 0x9d, 0x4d, 0x15, 0x1d, 0xaf, 0xe0, 0xee, 0x7b, 0x2f, 0x29, 0xde, 0x47,
	0x1a, 0x20, 0xf0, 0x35, 0xdc, 0x5f, 0x96, 0x39, 0xcc, 0x36, 0xb9, 0xd4, 0xe5, 0x23, 0xc0, 0x13,
	0xfb, 0xa6, 0x7f, 0x9d, 0x68, 0x1c, 0xed, 0x2d, 0x64, 0xd4, 0x84, 0x61, 0xf6, 0x68, 0x0a, 0x53,
	0x1d, 0x5c, 0x4c, 0xf6, 0x3f, 0xa4, 0x67, 0xfe, 0xc4, 0xa4, 0x30, 0xd5, 0xc9, 0x09, 0x96, 0xdf,
	0x06, 0x8e, 0x7a, 0xf8, 0xc2, 0xed, 0xb0, 0x4e, 0xd6, 0xc2, 0xce, 0xd3, 0xc4, 0xf1, 0x4e, 0x59,
	0xae, 0xa8, 0x63, 0xbd, 0x4a, 0x9d, 0xa0, 0x7c, 0xbf, 0xe7, 0xa1, 0xeb, 0x03, 0xa6, 0x85, 0xa9,
	0x12, 0x17, 0x93, 0xf4, 0x1f, 0x5b, 0xbf, 0x2b, 0x4c, 0x65, 0x5c, 0x4c, 0xf6, 0x06, 0xf6, 0x34,
	0x0e, 0xef, 0x8c, 0xfb, 0xc2, 0x54, 0xb9, 0xdb, 0x82, 0x6c, 0xb5, 0x7c, 0x6d, 0x30, 0x53, 0x1d,
	0xe5, 0xf2, 0x2b, 0x89, 0x3f, 0xf2, 0x4c, 0x4b, 0xc7, 0x7f, 0xad, 0x63, 0xef, 0x20, 0xf7, 0x43,
	0x73, 0x56, 0x87, 0x7f, 0xea, 0xf0, 0x9b, 0xc5, 0xc3, 0xaf, 0x13, 0xe6, 0x9b, 0x87, 0x5f, 0x27,
	0x69, 0xde, 0xc6, 0x80, 0x07, 0x95, 0x10, 0x94, 0xa6, 0xad, 0x47, 0x04, 0x9d, 0x17, 0x94, 0x26,
	0x2c, 0x2b, 0x1e, 0x75, 0x59, 0x50, 0x77, 0x29, 0x10, 0x9e, 0xe2, 0x2e, 0x05, 0xaa, 0x33, 0x7d,
	0xd9, 0x87, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xce, 0x4b, 0x19, 0x55, 0xe7, 0x01, 0x00, 0x00,
}
